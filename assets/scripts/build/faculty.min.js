/*!
 * getStyleProperty v1.0.3
 * original by kangax
 * http://perfectionkills.com/feature-testing-css-properties/
 */
/*jshint browser: true, strict: true, undef: true */
/*global define: false, exports: false, module: false */
(function(window) {
    "use strict";
    var prefixes = "Webkit Moz ms Ms O".split(" ");
    var docElemStyle = document.documentElement.style;
    function getStyleProperty(propName) {
        if (!propName) {
            return;
        }
        // test standard property first
        if (typeof docElemStyle[propName] === "string") {
            return propName;
        }
        // capitalize
        propName = propName.charAt(0).toUpperCase() + propName.slice(1);
        // test vendor specific properties
        var prefixed;
        for (var i = 0, len = prefixes.length; i < len; i++) {
            prefixed = prefixes[i] + propName;
            if (typeof docElemStyle[prefixed] === "string") {
                return prefixed;
            }
        }
    }
    // transport
    if (typeof define === "function" && define.amd) {
        // AMD
        define(function() {
            return getStyleProperty;
        });
    } else if (typeof exports === "object") {
        // CommonJS for Component
        module.exports = getStyleProperty;
    } else {
        // browser global
        window.getStyleProperty = getStyleProperty;
    }
})(window);

/**
 * getSize v1.1.7
 * measure size of elements
 */
/*jshint browser: true, strict: true, undef: true, unused: true */
/*global define: false, exports: false, require: false, module: false */
(function(window, undefined) {
    "use strict";
    // -------------------------- helpers -------------------------- //
    var getComputedStyle = window.getComputedStyle;
    var getStyle = getComputedStyle ? function(elem) {
        return getComputedStyle(elem, null);
    } : function(elem) {
        return elem.currentStyle;
    };
    // get a number from a string, not a percentage
    function getStyleSize(value) {
        var num = parseFloat(value);
        // not a percent like '100%', and a number
        var isValid = value.indexOf("%") === -1 && !isNaN(num);
        return isValid && num;
    }
    // -------------------------- measurements -------------------------- //
    var measurements = [ "paddingLeft", "paddingRight", "paddingTop", "paddingBottom", "marginLeft", "marginRight", "marginTop", "marginBottom", "borderLeftWidth", "borderRightWidth", "borderTopWidth", "borderBottomWidth" ];
    function getZeroSize() {
        var size = {
            width: 0,
            height: 0,
            innerWidth: 0,
            innerHeight: 0,
            outerWidth: 0,
            outerHeight: 0
        };
        for (var i = 0, len = measurements.length; i < len; i++) {
            var measurement = measurements[i];
            size[measurement] = 0;
        }
        return size;
    }
    function defineGetSize(getStyleProperty) {
        // -------------------------- box sizing -------------------------- //
        var boxSizingProp = getStyleProperty("boxSizing");
        var isBoxSizeOuter;
        /**
 * WebKit measures the outer-width on style.width on border-box elems
 * IE & Firefox measures the inner-width
 */
        (function() {
            if (!boxSizingProp) {
                return;
            }
            var div = document.createElement("div");
            div.style.width = "200px";
            div.style.padding = "1px 2px 3px 4px";
            div.style.borderStyle = "solid";
            div.style.borderWidth = "1px 2px 3px 4px";
            div.style[boxSizingProp] = "border-box";
            var body = document.body || document.documentElement;
            body.appendChild(div);
            var style = getStyle(div);
            isBoxSizeOuter = getStyleSize(style.width) === 200;
            body.removeChild(div);
        })();
        // -------------------------- getSize -------------------------- //
        function getSize(elem) {
            // use querySeletor if elem is string
            if (typeof elem === "string") {
                elem = document.querySelector(elem);
            }
            // do not proceed on non-objects
            if (!elem || typeof elem !== "object" || !elem.nodeType) {
                return;
            }
            var style = getStyle(elem);
            // if hidden, everything is 0
            if (style.display === "none") {
                return getZeroSize();
            }
            var size = {};
            size.width = elem.offsetWidth;
            size.height = elem.offsetHeight;
            var isBorderBox = size.isBorderBox = !!(boxSizingProp && style[boxSizingProp] && style[boxSizingProp] === "border-box");
            // get all measurements
            for (var i = 0, len = measurements.length; i < len; i++) {
                var measurement = measurements[i];
                var value = style[measurement];
                value = mungeNonPixel(elem, value);
                var num = parseFloat(value);
                // any 'auto', 'medium' value will be 0
                size[measurement] = !isNaN(num) ? num : 0;
            }
            var paddingWidth = size.paddingLeft + size.paddingRight;
            var paddingHeight = size.paddingTop + size.paddingBottom;
            var marginWidth = size.marginLeft + size.marginRight;
            var marginHeight = size.marginTop + size.marginBottom;
            var borderWidth = size.borderLeftWidth + size.borderRightWidth;
            var borderHeight = size.borderTopWidth + size.borderBottomWidth;
            var isBorderBoxSizeOuter = isBorderBox && isBoxSizeOuter;
            // overwrite width and height if we can get it from style
            var styleWidth = getStyleSize(style.width);
            if (styleWidth !== false) {
                size.width = styleWidth + (// add padding and border unless it's already including it
                isBorderBoxSizeOuter ? 0 : paddingWidth + borderWidth);
            }
            var styleHeight = getStyleSize(style.height);
            if (styleHeight !== false) {
                size.height = styleHeight + (// add padding and border unless it's already including it
                isBorderBoxSizeOuter ? 0 : paddingHeight + borderHeight);
            }
            size.innerWidth = size.width - (paddingWidth + borderWidth);
            size.innerHeight = size.height - (paddingHeight + borderHeight);
            size.outerWidth = size.width + marginWidth;
            size.outerHeight = size.height + marginHeight;
            return size;
        }
        // IE8 returns percent values, not pixels
        // taken from jQuery's curCSS
        function mungeNonPixel(elem, value) {
            // IE8 and has percent value
            if (getComputedStyle || value.indexOf("%") === -1) {
                return value;
            }
            var style = elem.style;
            // Remember the original values
            var left = style.left;
            var rs = elem.runtimeStyle;
            var rsLeft = rs && rs.left;
            // Put in the new values to get a computed value out
            if (rsLeft) {
                rs.left = elem.currentStyle.left;
            }
            style.left = value;
            value = style.pixelLeft;
            // Revert the changed values
            style.left = left;
            if (rsLeft) {
                rs.left = rsLeft;
            }
            return value;
        }
        return getSize;
    }
    // transport
    if (typeof define === "function" && define.amd) {
        // AMD for RequireJS
        define([ "get-style-property/get-style-property" ], defineGetSize);
    } else if (typeof exports === "object") {
        // CommonJS for Component
        module.exports = defineGetSize(require("get-style-property"));
    } else {
        // browser global
        window.getSize = defineGetSize(window.getStyleProperty);
    }
})(window);

/*
 * debouncedresize: special jQuery event that happens once after a window resize
 *
 * latest version and complete README available on Github:
 * https://github.com/louisremi/jquery-smartresize
 *
 * Copyright 2012 @louis_remi
 * Licensed under the MIT license.
 *
 * This saved you an hour of work? 
 * Send me music http://www.amazon.co.uk/wishlist/HNTU0468LQON
 */
(function($) {
    var $event = $.event, $special, resizeTimeout;
    $special = $event.special.debouncedresize = {
        setup: function() {
            $(this).on("resize", $special.handler);
        },
        teardown: function() {
            $(this).off("resize", $special.handler);
        },
        handler: function(event, execAsap) {
            // Save the context
            var context = this, args = arguments, dispatch = function() {
                // set correct event type
                event.type = "debouncedresize";
                $event.dispatch.apply(context, args);
            };
            if (resizeTimeout) {
                clearTimeout(resizeTimeout);
            }
            execAsap ? dispatch() : resizeTimeout = setTimeout(dispatch, $special.threshold);
        },
        threshold: 150
    };
})(jQuery);

(function(plugin) {
    // AMD Support
    if (typeof define === "function" && define.amd) {
        define([ "jquery" ], plugin);
    } else {
        plugin(jQuery);
    }
})(function($) {
    var $scrollTo = $.scrollTo = function(target, duration, settings) {
        return $(window).scrollTo(target, duration, settings);
    };
    $scrollTo.defaults = {
        axis: "xy",
        duration: parseFloat($.fn.jquery) >= 1.3 ? 0 : 1,
        limit: true
    };
    // Returns the element that needs to be animated to scroll the window.
    // Kept for backwards compatibility (specially for localScroll & serialScroll)
    $scrollTo.window = function(scope) {
        return $(window)._scrollable();
    };
    // Hack, hack, hack :)
    // Returns the real elements to scroll (supports window/iframes, documents and regular nodes)
    $.fn._scrollable = function() {
        return this.map(function() {
            var elem = this, isWin = !elem.nodeName || $.inArray(elem.nodeName.toLowerCase(), [ "iframe", "#document", "html", "body" ]) != -1;
            if (!isWin) return elem;
            var doc = (elem.contentWindow || elem).document || elem.ownerDocument || elem;
            return /webkit/i.test(navigator.userAgent) || doc.compatMode == "BackCompat" ? doc.body : doc.documentElement;
        });
    };
    $.fn.scrollTo = function(target, duration, settings) {
        if (typeof duration == "object") {
            settings = duration;
            duration = 0;
        }
        if (typeof settings == "function") settings = {
            onAfter: settings
        };
        if (target == "max") target = 9e9;
        settings = $.extend({}, $scrollTo.defaults, settings);
        // Speed is still recognized for backwards compatibility
        duration = duration || settings.duration;
        // Make sure the settings are given right
        settings.queue = settings.queue && settings.axis.length > 1;
        if (settings.queue) // Let's keep the overall duration
        duration /= 2;
        settings.offset = both(settings.offset);
        settings.over = both(settings.over);
        return this._scrollable().each(function() {
            // Null target yields nothing, just like jQuery does
            if (target == null) return;
            var elem = this, $elem = $(elem), targ = target, toff, attr = {}, win = $elem.is("html,body");
            switch (typeof targ) {
              // A number will pass the regex
                case "number":
              case "string":
                if (/^([+-]=?)?\d+(\.\d+)?(px|%)?$/.test(targ)) {
                    targ = both(targ);
                    // We are done
                    break;
                }
                // Relative selector, no break!
                targ = $(targ, this);
                if (!targ.length) return;

              case "object":
                // DOMElement / jQuery
                if (targ.is || targ.style) // Get the real position of the target
                toff = (targ = $(targ)).offset();
            }
            var offset = $.isFunction(settings.offset) && settings.offset(elem, targ) || settings.offset;
            $.each(settings.axis.split(""), function(i, axis) {
                var Pos = axis == "x" ? "Left" : "Top", pos = Pos.toLowerCase(), key = "scroll" + Pos, old = elem[key], max = $scrollTo.max(elem, axis);
                if (toff) {
                    // jQuery / DOMElement
                    attr[key] = toff[pos] + (win ? 0 : old - $elem.offset()[pos]);
                    // If it's a dom element, reduce the margin
                    if (settings.margin) {
                        attr[key] -= parseInt(targ.css("margin" + Pos)) || 0;
                        attr[key] -= parseInt(targ.css("border" + Pos + "Width")) || 0;
                    }
                    attr[key] += offset[pos] || 0;
                    if (settings.over[pos]) // Scroll to a fraction of its width/height
                    attr[key] += targ[axis == "x" ? "width" : "height"]() * settings.over[pos];
                } else {
                    var val = targ[pos];
                    // Handle percentage values
                    attr[key] = val.slice && val.slice(-1) == "%" ? parseFloat(val) / 100 * max : val;
                }
                // Number or 'number'
                if (settings.limit && /^\d+$/.test(attr[key])) // Check the limits
                attr[key] = attr[key] <= 0 ? 0 : Math.min(attr[key], max);
                // Queueing axes
                if (!i && settings.queue) {
                    // Don't waste time animating, if there's no need.
                    if (old != attr[key]) // Intermediate animation
                    animate(settings.onAfterFirst);
                    // Don't animate this axis again in the next iteration.
                    delete attr[key];
                }
            });
            animate(settings.onAfter);
            function animate(callback) {
                $elem.animate(attr, duration, settings.easing, callback && function() {
                    callback.call(this, targ, settings);
                });
            }
        }).end();
    };
    // Max scrolling position, works on quirks mode
    // It only fails (not too badly) on IE, quirks mode.
    $scrollTo.max = function(elem, axis) {
        var Dim = axis == "x" ? "Width" : "Height", scroll = "scroll" + Dim;
        if (!$(elem).is("html,body")) return elem[scroll] - $(elem)[Dim.toLowerCase()]();
        var size = "client" + Dim, html = elem.ownerDocument.documentElement, body = elem.ownerDocument.body;
        return Math.max(html[scroll], body[scroll]) - Math.min(html[size], body[size]);
    };
    function both(val) {
        return $.isFunction(val) || typeof val == "object" ? val : {
            top: val,
            left: val
        };
    }
    // AMD requirement
    return $scrollTo;
});

/*!
 * Isotope PACKAGED v2.0.0-beta.7
 * Magical sorting and filtering layouts
 * http://isotope.metafizzy.co
 */
(function(t) {
    function e() {}
    function i(t) {
        function i(e) {
            e.prototype.option || (e.prototype.option = function(e) {
                t.isPlainObject(e) && (this.options = t.extend(!0, this.options, e));
            });
        }
        function o(e, i) {
            t.fn[e] = function(o) {
                if ("string" == typeof o) {
                    for (var s = n.call(arguments, 1), a = 0, p = this.length; p > a; a++) {
                        var u = this[a], h = t.data(u, e);
                        if (h) if (t.isFunction(h[o]) && "_" !== o.charAt(0)) {
                            var f = h[o].apply(h, s);
                            if (void 0 !== f) return f;
                        } else r("no such method '" + o + "' for " + e + " instance"); else r("cannot call methods on " + e + " prior to initialization; " + "attempted to call '" + o + "'");
                    }
                    return this;
                }
                return this.each(function() {
                    var n = t.data(this, e);
                    n ? (n.option(o), n._init()) : (n = new i(this, o), t.data(this, e, n));
                });
            };
        }
        if (t) {
            var r = "undefined" == typeof console ? e : function(t) {
                console.error(t);
            };
            return t.bridget = function(t, e) {
                i(e), o(t, e);
            }, t.bridget;
        }
    }
    var n = Array.prototype.slice;
    "function" == typeof define && define.amd ? define("jquery-bridget/jquery.bridget", [ "jquery" ], i) : i(t.jQuery);
})(window), function(t) {
    function e(e) {
        var i = t.event;
        return i.target = i.target || i.srcElement || e, i;
    }
    var i = document.documentElement, n = function() {};
    i.addEventListener ? n = function(t, e, i) {
        t.addEventListener(e, i, !1);
    } : i.attachEvent && (n = function(t, i, n) {
        t[i + n] = n.handleEvent ? function() {
            var i = e(t);
            n.handleEvent.call(n, i);
        } : function() {
            var i = e(t);
            n.call(t, i);
        }, t.attachEvent("on" + i, t[i + n]);
    });
    var o = function() {};
    i.removeEventListener ? o = function(t, e, i) {
        t.removeEventListener(e, i, !1);
    } : i.detachEvent && (o = function(t, e, i) {
        t.detachEvent("on" + e, t[e + i]);
        try {
            delete t[e + i];
        } catch (n) {
            t[e + i] = void 0;
        }
    });
    var r = {
        bind: n,
        unbind: o
    };
    "function" == typeof define && define.amd ? define("eventie/eventie", r) : t.eventie = r;
}(this), function(t) {
    function e(t) {
        "function" == typeof t && (e.isReady ? t() : r.push(t));
    }
    function i(t) {
        var i = "readystatechange" === t.type && "complete" !== o.readyState;
        if (!e.isReady && !i) {
            e.isReady = !0;
            for (var n = 0, s = r.length; s > n; n++) {
                var a = r[n];
                a();
            }
        }
    }
    function n(n) {
        return n.bind(o, "DOMContentLoaded", i), n.bind(o, "readystatechange", i), n.bind(t, "load", i), 
        e;
    }
    var o = t.document, r = [];
    e.isReady = !1, "function" == typeof define && define.amd ? (e.isReady = "function" == typeof requirejs, 
    define("doc-ready/doc-ready", [ "eventie/eventie" ], n)) : t.docReady = n(t.eventie);
}(this), function() {
    function t() {}
    function e(t, e) {
        for (var i = t.length; i--; ) if (t[i].listener === e) return i;
        return -1;
    }
    function i(t) {
        return function() {
            return this[t].apply(this, arguments);
        };
    }
    var n = t.prototype, o = this, r = o.EventEmitter;
    n.getListeners = function(t) {
        var e, i, n = this._getEvents();
        if (t instanceof RegExp) {
            e = {};
            for (i in n) n.hasOwnProperty(i) && t.test(i) && (e[i] = n[i]);
        } else e = n[t] || (n[t] = []);
        return e;
    }, n.flattenListeners = function(t) {
        var e, i = [];
        for (e = 0; t.length > e; e += 1) i.push(t[e].listener);
        return i;
    }, n.getListenersAsObject = function(t) {
        var e, i = this.getListeners(t);
        return i instanceof Array && (e = {}, e[t] = i), e || i;
    }, n.addListener = function(t, i) {
        var n, o = this.getListenersAsObject(t), r = "object" == typeof i;
        for (n in o) o.hasOwnProperty(n) && -1 === e(o[n], i) && o[n].push(r ? i : {
            listener: i,
            once: !1
        });
        return this;
    }, n.on = i("addListener"), n.addOnceListener = function(t, e) {
        return this.addListener(t, {
            listener: e,
            once: !0
        });
    }, n.once = i("addOnceListener"), n.defineEvent = function(t) {
        return this.getListeners(t), this;
    }, n.defineEvents = function(t) {
        for (var e = 0; t.length > e; e += 1) this.defineEvent(t[e]);
        return this;
    }, n.removeListener = function(t, i) {
        var n, o, r = this.getListenersAsObject(t);
        for (o in r) r.hasOwnProperty(o) && (n = e(r[o], i), -1 !== n && r[o].splice(n, 1));
        return this;
    }, n.off = i("removeListener"), n.addListeners = function(t, e) {
        return this.manipulateListeners(!1, t, e);
    }, n.removeListeners = function(t, e) {
        return this.manipulateListeners(!0, t, e);
    }, n.manipulateListeners = function(t, e, i) {
        var n, o, r = t ? this.removeListener : this.addListener, s = t ? this.removeListeners : this.addListeners;
        if ("object" != typeof e || e instanceof RegExp) for (n = i.length; n--; ) r.call(this, e, i[n]); else for (n in e) e.hasOwnProperty(n) && (o = e[n]) && ("function" == typeof o ? r.call(this, n, o) : s.call(this, n, o));
        return this;
    }, n.removeEvent = function(t) {
        var e, i = typeof t, n = this._getEvents();
        if ("string" === i) delete n[t]; else if (t instanceof RegExp) for (e in n) n.hasOwnProperty(e) && t.test(e) && delete n[e]; else delete this._events;
        return this;
    }, n.removeAllListeners = i("removeEvent"), n.emitEvent = function(t, e) {
        var i, n, o, r, s = this.getListenersAsObject(t);
        for (o in s) if (s.hasOwnProperty(o)) for (n = s[o].length; n--; ) i = s[o][n], 
        i.once === !0 && this.removeListener(t, i.listener), r = i.listener.apply(this, e || []), 
        r === this._getOnceReturnValue() && this.removeListener(t, i.listener);
        return this;
    }, n.trigger = i("emitEvent"), n.emit = function(t) {
        var e = Array.prototype.slice.call(arguments, 1);
        return this.emitEvent(t, e);
    }, n.setOnceReturnValue = function(t) {
        return this._onceReturnValue = t, this;
    }, n._getOnceReturnValue = function() {
        return this.hasOwnProperty("_onceReturnValue") ? this._onceReturnValue : !0;
    }, n._getEvents = function() {
        return this._events || (this._events = {});
    }, t.noConflict = function() {
        return o.EventEmitter = r, t;
    }, "function" == typeof define && define.amd ? define("eventEmitter/EventEmitter", [], function() {
        return t;
    }) : "object" == typeof module && module.exports ? module.exports = t : this.EventEmitter = t;
}.call(this), function(t) {
    function e(t) {
        if (t) {
            if ("string" == typeof n[t]) return t;
            t = t.charAt(0).toUpperCase() + t.slice(1);
            for (var e, o = 0, r = i.length; r > o; o++) if (e = i[o] + t, "string" == typeof n[e]) return e;
        }
    }
    var i = "Webkit Moz ms Ms O".split(" "), n = document.documentElement.style;
    "function" == typeof define && define.amd ? define("get-style-property/get-style-property", [], function() {
        return e;
    }) : "object" == typeof exports ? module.exports = e : t.getStyleProperty = e;
}(window), function(t) {
    function e(t) {
        var e = parseFloat(t), i = -1 === t.indexOf("%") && !isNaN(e);
        return i && e;
    }
    function i() {
        for (var t = {
            width: 0,
            height: 0,
            innerWidth: 0,
            innerHeight: 0,
            outerWidth: 0,
            outerHeight: 0
        }, e = 0, i = a.length; i > e; e++) {
            var n = a[e];
            t[n] = 0;
        }
        return t;
    }
    function n(t) {
        function n(t) {
            if ("string" == typeof t && (t = document.querySelector(t)), t && "object" == typeof t && t.nodeType) {
                var n = s(t);
                if ("none" === n.display) return i();
                var r = {};
                r.width = t.offsetWidth, r.height = t.offsetHeight;
                for (var h = r.isBorderBox = !(!u || !n[u] || "border-box" !== n[u]), f = 0, l = a.length; l > f; f++) {
                    var d = a[f], c = n[d];
                    c = o(t, c);
                    var y = parseFloat(c);
                    r[d] = isNaN(y) ? 0 : y;
                }
                var m = r.paddingLeft + r.paddingRight, g = r.paddingTop + r.paddingBottom, v = r.marginLeft + r.marginRight, _ = r.marginTop + r.marginBottom, I = r.borderLeftWidth + r.borderRightWidth, L = r.borderTopWidth + r.borderBottomWidth, z = h && p, S = e(n.width);
                S !== !1 && (r.width = S + (z ? 0 : m + I));
                var E = e(n.height);
                return E !== !1 && (r.height = E + (z ? 0 : g + L)), r.innerWidth = r.width - (m + I), 
                r.innerHeight = r.height - (g + L), r.outerWidth = r.width + v, r.outerHeight = r.height + _, 
                r;
            }
        }
        function o(t, e) {
            if (r || -1 === e.indexOf("%")) return e;
            var i = t.style, n = i.left, o = t.runtimeStyle, s = o && o.left;
            return s && (o.left = t.currentStyle.left), i.left = e, e = i.pixelLeft, i.left = n, 
            s && (o.left = s), e;
        }
        var p, u = t("boxSizing");
        return function() {
            if (u) {
                var t = document.createElement("div");
                t.style.width = "200px", t.style.padding = "1px 2px 3px 4px", t.style.borderStyle = "solid", 
                t.style.borderWidth = "1px 2px 3px 4px", t.style[u] = "border-box";
                var i = document.body || document.documentElement;
                i.appendChild(t);
                var n = s(t);
                p = 200 === e(n.width), i.removeChild(t);
            }
        }(), n;
    }
    var o = document.defaultView, r = o && o.getComputedStyle, s = r ? function(t) {
        return o.getComputedStyle(t, null);
    } : function(t) {
        return t.currentStyle;
    }, a = [ "paddingLeft", "paddingRight", "paddingTop", "paddingBottom", "marginLeft", "marginRight", "marginTop", "marginBottom", "borderLeftWidth", "borderRightWidth", "borderTopWidth", "borderBottomWidth" ];
    "function" == typeof define && define.amd ? define("get-size/get-size", [ "get-style-property/get-style-property" ], n) : "object" == typeof exports ? module.exports = n(require("get-style-property")) : t.getSize = n(t.getStyleProperty);
}(window), function(t, e) {
    function i(t, e) {
        return t[a](e);
    }
    function n(t) {
        if (!t.parentNode) {
            var e = document.createDocumentFragment();
            e.appendChild(t);
        }
    }
    function o(t, e) {
        n(t);
        for (var i = t.parentNode.querySelectorAll(e), o = 0, r = i.length; r > o; o++) if (i[o] === t) return !0;
        return !1;
    }
    function r(t, e) {
        return n(t), i(t, e);
    }
    var s, a = function() {
        if (e.matchesSelector) return "matchesSelector";
        for (var t = [ "webkit", "moz", "ms", "o" ], i = 0, n = t.length; n > i; i++) {
            var o = t[i], r = o + "MatchesSelector";
            if (e[r]) return r;
        }
    }();
    if (a) {
        var p = document.createElement("div"), u = i(p, "div");
        s = u ? i : r;
    } else s = o;
    "function" == typeof define && define.amd ? define("matches-selector/matches-selector", [], function() {
        return s;
    }) : window.matchesSelector = s;
}(this, Element.prototype), function(t) {
    function e(t, e) {
        for (var i in e) t[i] = e[i];
        return t;
    }
    function i(t) {
        for (var e in t) return !1;
        return e = null, !0;
    }
    function n(t) {
        return t.replace(/([A-Z])/g, function(t) {
            return "-" + t.toLowerCase();
        });
    }
    function o(t, o, r) {
        function a(t, e) {
            t && (this.element = t, this.layout = e, this.position = {
                x: 0,
                y: 0
            }, this._create());
        }
        var p = r("transition"), u = r("transform"), h = p && u, f = !!r("perspective"), l = {
            WebkitTransition: "webkitTransitionEnd",
            MozTransition: "transitionend",
            OTransition: "otransitionend",
            transition: "transitionend"
        }[p], d = [ "transform", "transition", "transitionDuration", "transitionProperty" ], c = function() {
            for (var t = {}, e = 0, i = d.length; i > e; e++) {
                var n = d[e], o = r(n);
                o && o !== n && (t[n] = o);
            }
            return t;
        }();
        e(a.prototype, t.prototype), a.prototype._create = function() {
            this._transition = {
                ingProperties: {},
                clean: {},
                onEnd: {}
            }, this.css({
                position: "absolute"
            });
        }, a.prototype.handleEvent = function(t) {
            var e = "on" + t.type;
            this[e] && this[e](t);
        }, a.prototype.getSize = function() {
            this.size = o(this.element);
        }, a.prototype.css = function(t) {
            var e = this.element.style;
            for (var i in t) {
                var n = c[i] || i;
                e[n] = t[i];
            }
        }, a.prototype.getPosition = function() {
            var t = s(this.element), e = this.layout.options, i = e.isOriginLeft, n = e.isOriginTop, o = parseInt(t[i ? "left" : "right"], 10), r = parseInt(t[n ? "top" : "bottom"], 10);
            o = isNaN(o) ? 0 : o, r = isNaN(r) ? 0 : r;
            var a = this.layout.size;
            o -= i ? a.paddingLeft : a.paddingRight, r -= n ? a.paddingTop : a.paddingBottom, 
            this.position.x = o, this.position.y = r;
        }, a.prototype.layoutPosition = function() {
            var t = this.layout.size, e = this.layout.options, i = {};
            e.isOriginLeft ? (i.left = this.position.x + t.paddingLeft + "px", i.right = "") : (i.right = this.position.x + t.paddingRight + "px", 
            i.left = ""), e.isOriginTop ? (i.top = this.position.y + t.paddingTop + "px", i.bottom = "") : (i.bottom = this.position.y + t.paddingBottom + "px", 
            i.top = ""), this.css(i), this.emitEvent("layout", [ this ]);
        };
        var y = f ? function(t, e) {
            return "translate3d(" + t + "px, " + e + "px, 0)";
        } : function(t, e) {
            return "translate(" + t + "px, " + e + "px)";
        };
        a.prototype._transitionTo = function(t, e) {
            this.getPosition();
            var i = this.position.x, n = this.position.y, o = parseInt(t, 10), r = parseInt(e, 10), s = o === this.position.x && r === this.position.y;
            if (this.setPosition(t, e), s && !this.isTransitioning) return this.layoutPosition(), 
            void 0;
            var a = t - i, p = e - n, u = {}, h = this.layout.options;
            a = h.isOriginLeft ? a : -a, p = h.isOriginTop ? p : -p, u.transform = y(a, p), 
            this.transition({
                to: u,
                onTransitionEnd: {
                    transform: this.layoutPosition
                },
                isCleaning: !0
            });
        }, a.prototype.goTo = function(t, e) {
            this.setPosition(t, e), this.layoutPosition();
        }, a.prototype.moveTo = h ? a.prototype._transitionTo : a.prototype.goTo, a.prototype.setPosition = function(t, e) {
            this.position.x = parseInt(t, 10), this.position.y = parseInt(e, 10);
        }, a.prototype._nonTransition = function(t) {
            this.css(t.to), t.isCleaning && this._removeStyles(t.to);
            for (var e in t.onTransitionEnd) t.onTransitionEnd[e].call(this);
        }, a.prototype._transition = function(t) {
            if (!parseFloat(this.layout.options.transitionDuration)) return this._nonTransition(t), 
            void 0;
            var e = this._transition;
            for (var i in t.onTransitionEnd) e.onEnd[i] = t.onTransitionEnd[i];
            for (i in t.to) e.ingProperties[i] = !0, t.isCleaning && (e.clean[i] = !0);
            if (t.from) {
                this.css(t.from);
                var n = this.element.offsetHeight;
                n = null;
            }
            this.enableTransition(t.to), this.css(t.to), this.isTransitioning = !0;
        };
        var m = u && n(u) + ",opacity";
        a.prototype.enableTransition = function() {
            this.isTransitioning || (this.css({
                transitionProperty: m,
                transitionDuration: this.layout.options.transitionDuration
            }), this.element.addEventListener(l, this, !1));
        }, a.prototype.transition = a.prototype[p ? "_transition" : "_nonTransition"], a.prototype.onwebkitTransitionEnd = function(t) {
            this.ontransitionend(t);
        }, a.prototype.onotransitionend = function(t) {
            this.ontransitionend(t);
        };
        var g = {
            "-webkit-transform": "transform",
            "-moz-transform": "transform",
            "-o-transform": "transform"
        };
        a.prototype.ontransitionend = function(t) {
            if (t.target === this.element) {
                var e = this._transition, n = g[t.propertyName] || t.propertyName;
                if (delete e.ingProperties[n], i(e.ingProperties) && this.disableTransition(), n in e.clean && (this.element.style[t.propertyName] = "", 
                delete e.clean[n]), n in e.onEnd) {
                    var o = e.onEnd[n];
                    o.call(this), delete e.onEnd[n];
                }
                this.emitEvent("transitionEnd", [ this ]);
            }
        }, a.prototype.disableTransition = function() {
            this.removeTransitionStyles(), this.element.removeEventListener(l, this, !1), this.isTransitioning = !1;
        }, a.prototype._removeStyles = function(t) {
            var e = {};
            for (var i in t) e[i] = "";
            this.css(e);
        };
        var v = {
            transitionProperty: "",
            transitionDuration: ""
        };
        return a.prototype.removeTransitionStyles = function() {
            this.css(v);
        }, a.prototype.removeElem = function() {
            this.element.parentNode.removeChild(this.element), this.emitEvent("remove", [ this ]);
        }, a.prototype.remove = function() {
            if (!p || !parseFloat(this.layout.options.transitionDuration)) return this.removeElem(), 
            void 0;
            var t = this;
            this.on("transitionEnd", function() {
                return t.removeElem(), !0;
            }), this.hide();
        }, a.prototype.reveal = function() {
            delete this.isHidden, this.css({
                display: ""
            });
            var t = this.layout.options;
            this.transition({
                from: t.hiddenStyle,
                to: t.visibleStyle,
                isCleaning: !0
            });
        }, a.prototype.hide = function() {
            this.isHidden = !0, this.css({
                display: ""
            });
            var t = this.layout.options;
            this.transition({
                from: t.visibleStyle,
                to: t.hiddenStyle,
                isCleaning: !0,
                onTransitionEnd: {
                    opacity: function() {
                        this.isHidden && this.css({
                            display: "none"
                        });
                    }
                }
            });
        }, a.prototype.destroy = function() {
            this.css({
                position: "",
                left: "",
                right: "",
                top: "",
                bottom: "",
                transition: "",
                transform: ""
            });
        }, a;
    }
    var r = document.defaultView, s = r && r.getComputedStyle ? function(t) {
        return r.getComputedStyle(t, null);
    } : function(t) {
        return t.currentStyle;
    };
    "function" == typeof define && define.amd ? define("outlayer/item", [ "eventEmitter/EventEmitter", "get-size/get-size", "get-style-property/get-style-property" ], o) : (t.Outlayer = {}, 
    t.Outlayer.Item = o(t.EventEmitter, t.getSize, t.getStyleProperty));
}(window), function(t) {
    function e(t, e) {
        for (var i in e) t[i] = e[i];
        return t;
    }
    function i(t) {
        return "[object Array]" === f.call(t);
    }
    function n(t) {
        var e = [];
        if (i(t)) e = t; else if (t && "number" == typeof t.length) for (var n = 0, o = t.length; o > n; n++) e.push(t[n]); else e.push(t);
        return e;
    }
    function o(t, e) {
        var i = d(e, t);
        -1 !== i && e.splice(i, 1);
    }
    function r(t) {
        return t.replace(/(.)([A-Z])/g, function(t, e, i) {
            return e + "-" + i;
        }).toLowerCase();
    }
    function s(i, s, f, d, c, y) {
        function m(t, i) {
            if ("string" == typeof t && (t = a.querySelector(t)), !t || !l(t)) return p && p.error("Bad " + this.settings.namespace + " element: " + t), 
            void 0;
            this.element = t, this.options = e({}, this.options), this.option(i);
            var n = ++v;
            this.element.outlayerGUID = n, _[n] = this, this._create(), this.options.isInitLayout && this.layout();
        }
        function g(t, i) {
            t.prototype[i] = e({}, m.prototype[i]);
        }
        var v = 0, _ = {};
        return m.prototype.settings = {
            namespace: "outlayer",
            item: y
        }, m.prototype.options = {
            containerStyle: {
                position: "relative"
            },
            isInitLayout: !0,
            isOriginLeft: !0,
            isOriginTop: !0,
            isResizeBound: !0,
            transitionDuration: "0.4s",
            hiddenStyle: {
                opacity: 0,
                transform: "scale(0.001)"
            },
            visibleStyle: {
                opacity: 1,
                transform: "scale(1)"
            }
        }, e(m.prototype, f.prototype), m.prototype.option = function(t) {
            e(this.options, t);
        }, m.prototype._create = function() {
            this.reloadItems(), this.stamps = [], this.stamp(this.options.stamp), e(this.element.style, this.options.containerStyle), 
            this.options.isResizeBound && this.bindResize();
        }, m.prototype.reloadItems = function() {
            this.items = this._itemize(this.element.children);
        }, m.prototype._itemize = function(t) {
            for (var e = this._filterFindItemElements(t), i = this.settings.item, n = [], o = 0, r = e.length; r > o; o++) {
                var s = e[o], a = new i(s, this);
                n.push(a);
            }
            return n;
        }, m.prototype._filterFindItemElements = function(t) {
            t = n(t);
            for (var e = this.options.itemSelector, i = [], o = 0, r = t.length; r > o; o++) {
                var s = t[o];
                if (l(s)) if (e) {
                    c(s, e) && i.push(s);
                    for (var a = s.querySelectorAll(e), p = 0, u = a.length; u > p; p++) i.push(a[p]);
                } else i.push(s);
            }
            return i;
        }, m.prototype.getItemElements = function() {
            for (var t = [], e = 0, i = this.items.length; i > e; e++) t.push(this.items[e].element);
            return t;
        }, m.prototype.layout = function() {
            this._resetLayout(), this._manageStamps();
            var t = void 0 !== this.options.isLayoutInstant ? this.options.isLayoutInstant : !this._isLayoutInited;
            this.layoutItems(this.items, t), this._isLayoutInited = !0;
        }, m.prototype._init = m.prototype.layout, m.prototype._resetLayout = function() {
            this.getSize();
        }, m.prototype.getSize = function() {
            this.size = d(this.element);
        }, m.prototype._getMeasurement = function(t, e) {
            var i, n = this.options[t];
            n ? ("string" == typeof n ? i = this.element.querySelector(n) : l(n) && (i = n), 
            this[t] = i ? d(i)[e] : n) : this[t] = 0;
        }, m.prototype.layoutItems = function(t, e) {
            t = this._getItemsForLayout(t), this._layoutItems(t, e), this._postLayout();
        }, m.prototype._getItemsForLayout = function(t) {
            for (var e = [], i = 0, n = t.length; n > i; i++) {
                var o = t[i];
                o.isIgnored || e.push(o);
            }
            return e;
        }, m.prototype._layoutItems = function(t, e) {
            if (!t || !t.length) return this.emitEvent("layoutComplete", [ this, t ]), void 0;
            this._itemsOn(t, "layout", function() {
                this.emitEvent("layoutComplete", [ this, t ]);
            });
            for (var i = [], n = 0, o = t.length; o > n; n++) {
                var r = t[n], s = this._getItemLayoutPosition(r);
                s.item = r, s.isInstant = e, i.push(s);
            }
            this._processLayoutQueue(i);
        }, m.prototype._getItemLayoutPosition = function() {
            return {
                x: 0,
                y: 0
            };
        }, m.prototype._processLayoutQueue = function(t) {
            for (var e = 0, i = t.length; i > e; e++) {
                var n = t[e];
                this._positionItem(n.item, n.x, n.y, n.isInstant);
            }
        }, m.prototype._positionItem = function(t, e, i, n) {
            n ? t.goTo(e, i) : t.moveTo(e, i);
        }, m.prototype._postLayout = function() {
            var t = this._getContainerSize();
            t && (this._setContainerMeasure(t.width, !0), this._setContainerMeasure(t.height, !1));
        }, m.prototype._getContainerSize = h, m.prototype._setContainerMeasure = function(t, e) {
            if (void 0 !== t) {
                var i = this.size;
                i.isBorderBox && (t += e ? i.paddingLeft + i.paddingRight + i.borderLeftWidth + i.borderRightWidth : i.paddingBottom + i.paddingTop + i.borderTopWidth + i.borderBottomWidth), 
                t = Math.max(t, 0), this.element.style[e ? "width" : "height"] = t + "px";
            }
        }, m.prototype._itemsOn = function(t, e, i) {
            function n() {
                return o++, o === r && i.call(s), !0;
            }
            for (var o = 0, r = t.length, s = this, a = 0, p = t.length; p > a; a++) {
                var u = t[a];
                u.on(e, n);
            }
        }, m.prototype.ignore = function(t) {
            var e = this.getItem(t);
            e && (e.isIgnored = !0);
        }, m.prototype.unignore = function(t) {
            var e = this.getItem(t);
            e && delete e.isIgnored;
        }, m.prototype.stamp = function(t) {
            if (t = this._find(t)) {
                this.stamps = this.stamps.concat(t);
                for (var e = 0, i = t.length; i > e; e++) {
                    var n = t[e];
                    this.ignore(n);
                }
            }
        }, m.prototype.unstamp = function(t) {
            if (t = this._find(t)) for (var e = 0, i = t.length; i > e; e++) {
                var n = t[e];
                o(n, this.stamps), this.unignore(n);
            }
        }, m.prototype._find = function(t) {
            return t ? ("string" == typeof t && (t = this.element.querySelectorAll(t)), t = n(t)) : void 0;
        }, m.prototype._manageStamps = function() {
            if (this.stamps && this.stamps.length) {
                this._getBoundingRect();
                for (var t = 0, e = this.stamps.length; e > t; t++) {
                    var i = this.stamps[t];
                    this._manageStamp(i);
                }
            }
        }, m.prototype._getBoundingRect = function() {
            var t = this.element.getBoundingClientRect(), e = this.size;
            this._boundingRect = {
                left: t.left + e.paddingLeft + e.borderLeftWidth,
                top: t.top + e.paddingTop + e.borderTopWidth,
                right: t.right - (e.paddingRight + e.borderRightWidth),
                bottom: t.bottom - (e.paddingBottom + e.borderBottomWidth)
            };
        }, m.prototype._manageStamp = h, m.prototype._getElementOffset = function(t) {
            var e = t.getBoundingClientRect(), i = this._boundingRect, n = d(t), o = {
                left: e.left - i.left - n.marginLeft,
                top: e.top - i.top - n.marginTop,
                right: i.right - e.right - n.marginRight,
                bottom: i.bottom - e.bottom - n.marginBottom
            };
            return o;
        }, m.prototype.handleEvent = function(t) {
            var e = "on" + t.type;
            this[e] && this[e](t);
        }, m.prototype.bindResize = function() {
            this.isResizeBound || (i.bind(t, "resize", this), this.isResizeBound = !0);
        }, m.prototype.unbindResize = function() {
            i.unbind(t, "resize", this), this.isResizeBound = !1;
        }, m.prototype.onresize = function() {
            function t() {
                e.resize(), delete e.resizeTimeout;
            }
            this.resizeTimeout && clearTimeout(this.resizeTimeout);
            var e = this;
            this.resizeTimeout = setTimeout(t, 100);
        }, m.prototype.resize = function() {
            var t = d(this.element), e = this.size && t;
            e && t.innerWidth === this.size.innerWidth || this.layout();
        }, m.prototype.addItems = function(t) {
            var e = this._itemize(t);
            return e.length && (this.items = this.items.concat(e)), e;
        }, m.prototype.appended = function(t) {
            var e = this.addItems(t);
            e.length && (this.layoutItems(e, !0), this.reveal(e));
        }, m.prototype.prepended = function(t) {
            var e = this._itemize(t);
            if (e.length) {
                var i = this.items.slice(0);
                this.items = e.concat(i), this._resetLayout(), this._manageStamps(), this.layoutItems(e, !0), 
                this.reveal(e), this.layoutItems(i);
            }
        }, m.prototype.reveal = function(t) {
            if (t && t.length) for (var e = 0, i = t.length; i > e; e++) {
                var n = t[e];
                n.reveal();
            }
        }, m.prototype.hide = function(t) {
            if (t && t.length) for (var e = 0, i = t.length; i > e; e++) {
                var n = t[e];
                n.hide();
            }
        }, m.prototype.getItem = function(t) {
            for (var e = 0, i = this.items.length; i > e; e++) {
                var n = this.items[e];
                if (n.element === t) return n;
            }
        }, m.prototype.getItems = function(t) {
            if (t && t.length) {
                for (var e = [], i = 0, n = t.length; n > i; i++) {
                    var o = t[i], r = this.getItem(o);
                    r && e.push(r);
                }
                return e;
            }
        }, m.prototype.remove = function(t) {
            t = n(t);
            var e = this.getItems(t);
            if (e && e.length) {
                this._itemsOn(e, "remove", function() {
                    this.emitEvent("removeComplete", [ this, e ]);
                });
                for (var i = 0, r = e.length; r > i; i++) {
                    var s = e[i];
                    s.remove(), o(s, this.items);
                }
            }
        }, m.prototype.destroy = function() {
            var t = this.element.style;
            t.height = "", t.position = "", t.width = "";
            for (var e = 0, i = this.items.length; i > e; e++) {
                var n = this.items[e];
                n.destroy();
            }
            this.unbindResize(), delete this.element.outlayerGUID, u && u.removeData(this.element, this.settings.namespace);
        }, m.data = function(t) {
            var e = t && t.outlayerGUID;
            return e && _[e];
        }, m.create = function(t, i) {
            function n() {
                m.apply(this, arguments);
            }
            return e(n.prototype, m.prototype), g(n, "options"), g(n, "settings"), e(n.prototype.options, i), 
            n.prototype.settings.namespace = t, n.data = m.data, n.Item = function() {
                y.apply(this, arguments);
            }, n.Item.prototype = new y(), n.prototype.settings.item = n.Item, s(function() {
                for (var e = r(t), i = a.querySelectorAll(".js-" + e), o = "data-" + e + "-options", s = 0, h = i.length; h > s; s++) {
                    var f, l = i[s], d = l.getAttribute(o);
                    try {
                        f = d && JSON.parse(d);
                    } catch (c) {
                        p && p.error("Error parsing " + o + " on " + l.nodeName.toLowerCase() + (l.id ? "#" + l.id : "") + ": " + c);
                        continue;
                    }
                    var y = new n(l, f);
                    u && u.data(l, t, y);
                }
            }), u && u.bridget && u.bridget(t, n), n;
        }, m.Item = y, m;
    }
    var a = t.document, p = t.console, u = t.jQuery, h = function() {}, f = Object.prototype.toString, l = "object" == typeof HTMLElement ? function(t) {
        return t instanceof HTMLElement;
    } : function(t) {
        return t && "object" == typeof t && 1 === t.nodeType && "string" == typeof t.nodeName;
    }, d = Array.prototype.indexOf ? function(t, e) {
        return t.indexOf(e);
    } : function(t, e) {
        for (var i = 0, n = t.length; n > i; i++) if (t[i] === e) return i;
        return -1;
    };
    "function" == typeof define && define.amd ? define("outlayer/outlayer", [ "eventie/eventie", "doc-ready/doc-ready", "eventEmitter/EventEmitter", "get-size/get-size", "matches-selector/matches-selector", "./item" ], s) : t.Outlayer = s(t.eventie, t.docReady, t.EventEmitter, t.getSize, t.matchesSelector, t.Outlayer.Item);
}(window), function(t) {
    function e(t) {
        function e() {
            t.Item.apply(this, arguments);
        }
        return e.prototype = new t.Item(), e.prototype._create = function() {
            this.id = this.layout.itemGUID++, t.Item.prototype._create.call(this), this.sortData = {};
        }, e.prototype.updateSortData = function() {
            this.sortData.id = this.id, this.sortData["original-order"] = this.id, this.sortData.random = Math.random();
            var t = this.layout.options.getSortData, e = this.layout._sorters;
            for (var i in t) {
                var n = e[i];
                this.sortData[i] = n(this.element, this);
            }
        }, e;
    }
    "function" == typeof define && define.amd ? define("isotope/js/item", [ "outlayer/outlayer" ], e) : (t.Isotope = t.Isotope || {}, 
    t.Isotope.Item = e(t.Outlayer));
}(window), function(t) {
    function e(t, e) {
        function i(t) {
            this.isotope = t, t && (this.options = t.options[this.namespace], this.element = t.element, 
            this.items = t.filteredItems, this.size = t.size);
        }
        return function() {
            function t(t) {
                return function() {
                    return e.prototype[t].apply(this.isotope, arguments);
                };
            }
            for (var n = [ "_resetLayout", "_getItemLayoutPosition", "_manageStamp", "_getContainerSize", "_getElementOffset", "resize" ], o = 0, r = n.length; r > o; o++) {
                var s = n[o];
                i.prototype[s] = t(s);
            }
        }(), i.prototype.resizeVertical = function() {
            var e = t(this.isotope.element), i = this.isotope.size && e;
            i && e.innerHeight === this.isotope.size.innerHeight || this.isotope.layout();
        }, i.prototype._getMeasurement = function() {
            this.isotope._getMeasurement.apply(this, arguments);
        }, i.prototype.getColumnWidth = function() {
            this.getSegmentSize("column", "Width");
        }, i.prototype.getRowHeight = function() {
            this.getSegmentSize("row", "Height");
        }, i.prototype.getSegmentSize = function(t, e) {
            var i = t + e, n = "outer" + e;
            if (this._getMeasurement(i, n), !this[i]) {
                var o = this.getFirstItemSize();
                this[i] = o && o[n] || this.isotope.size["inner" + e];
            }
        }, i.prototype.getFirstItemSize = function() {
            var e = this.isotope.filteredItems[0];
            return e && e.element && t(e.element);
        }, i.prototype.layout = function() {
            this.isotope.layout.apply(this.isotope, arguments);
        }, i.prototype.getSize = function() {
            this.isotope.getSize(), this.size = this.isotope.size;
        }, i.modes = {}, i.create = function(t, e) {
            function n() {
                i.apply(this, arguments);
            }
            return n.prototype = new i(), e && (n.options = e), n.prototype.namespace = t, i.modes[t] = n, 
            n;
        }, i;
    }
    "function" == typeof define && define.amd ? define("isotope/js/layout-mode", [ "get-size/get-size", "outlayer/outlayer" ], e) : (t.Isotope = t.Isotope || {}, 
    t.Isotope.LayoutMode = e(t.getSize, t.Outlayer));
}(window), function(t) {
    function e(t, e) {
        for (var i in e) t[i] = e[i];
        return t;
    }
    function i(t) {
        return "[object Array]" === h.call(t);
    }
    function n(t) {
        var e = [];
        if (i(t)) e = t; else if (t && "number" == typeof t.length) for (var n = 0, o = t.length; o > n; n++) e.push(t[n]); else e.push(t);
        return e;
    }
    function o(t, e) {
        var i = f(e, t);
        -1 !== i && e.splice(i, 1);
    }
    function r(t, i, r, p, h) {
        function f(t, e) {
            return function(i, n) {
                for (var o = 0, r = t.length; r > o; o++) {
                    var s = t[o], a = i.sortData[s], p = n.sortData[s];
                    if (a > p || p > a) {
                        var u = void 0 !== e[s] ? e[s] : e, h = u ? 1 : -1;
                        return (a > p ? 1 : -1) * h;
                    }
                }
                return 0;
            };
        }
        var l = t.create("isotope", {
            layoutMode: "masonry",
            isJQueryFiltering: !0,
            sortAscending: !0
        });
        l.Item = l.prototype.settings.item = p, l.LayoutMode = h, l.prototype._create = function() {
            this.itemGUID = 0, this._sorters = {}, t.prototype._create.call(this), this.modes = {}, 
            this.filteredItems = this.items, this.sortHistory = [ "original-order" ];
            for (var e in h.modes) this._initLayoutMode(e);
        }, l.prototype.reloadItems = function() {
            this.itemGUID = 0, t.prototype.reloadItems.call(this);
        }, l.prototype._itemize = function() {
            for (var e = t.prototype._itemize.apply(this, arguments), i = 0, n = e.length; n > i; i++) {
                var o = e[i];
                o.id = this.itemGUID++;
            }
            return this.updateSortData(e), e;
        }, l.prototype._initLayoutMode = function(t) {
            var i = h.modes[t], n = this.options[t] || {};
            this.options[t] = i.options ? e(i.options, n) : n, this.modes[t] = new i(this);
        }, l.prototype.layout = function() {
            return !this._isLayoutInited && this.options.isInitLayout ? (this.arrange(), void 0) : (this._layout(), 
            void 0);
        }, l.prototype._layout = function() {
            var t = this._getIsInstant();
            this._resetLayout(), this._manageStamps(), this.layoutItems(this.filteredItems, t), 
            this._isLayoutInited = !0;
        }, l.prototype.arrange = function(t) {
            this.option(t), this._getIsInstant(), this.filteredItems = this._filter(this.items), 
            this._sort(), this._layout();
        }, l.prototype._init = l.prototype.arrange, l.prototype._getIsInstant = function() {
            var t = void 0 !== this.options.isLayoutInstant ? this.options.isLayoutInstant : !this._isLayoutInited;
            return this._isInstant = t;
        }, l.prototype._filter = function(t) {
            var e = this.options.filter;
            e = e || "*";
            for (var i = [], n = [], o = [], r = this._getFilterTest(e), s = 0, a = t.length; a > s; s++) {
                var p = t[s];
                if (!p.isIgnored) {
                    var u = r(p);
                    u && i.push(p), u && p.isHidden ? n.push(p) : u || p.isHidden || o.push(p);
                }
            }
            var h = this.options.transitionDuration;
            return this._isInstant && (this.options.transitionDuration = 0), this.reveal(n), 
            this.hide(o), this._isInstant && (this.options.transitionDuration = h), i;
        }, l.prototype._getFilterTest = function(t) {
            var e;
            return e = s && this.options.isJQueryFiltering ? function(e) {
                return s(e.element).is(t);
            } : "function" == typeof t ? function(e) {
                return t(e.element);
            } : function(e) {
                return r(e.element, t);
            };
        }, l.prototype.updateSortData = function(t) {
            var e = this.options.getSortData;
            for (var i in e) {
                var n = e[i];
                this._sorters[i] = d(n);
            }
            t = t || this.items;
            for (var o = 0, r = t.length; r > o; o++) {
                var s = t[o];
                s.isIgnored || s.updateSortData();
            }
        };
        var d = function() {
            function t(t) {
                if ("string" != typeof t) return t;
                var n = a(t).split(" "), o = n[0], r = o.match(/^\[(.+)\]$/), s = r && r[1], p = e(s, o), u = i(n[1]);
                return t = u ? function(t) {
                    return t && u(p(t));
                } : function(t) {
                    return t && p(t);
                };
            }
            function e(t, e) {
                var i;
                return i = t ? function(e) {
                    return e.getAttribute(t);
                } : function(t) {
                    var i = t.querySelector(e);
                    return i && u(i);
                };
            }
            function i(t) {
                var e;
                switch (t) {
                  case "parseInt":
                    e = function(t) {
                        return parseInt(t, 10);
                    };
                    break;

                  case "parseFloat":
                    e = function(t) {
                        return parseFloat(t);
                    };
                    break;

                  default:
                    e = function(t) {
                        return t;
                    };
                }
                return e;
            }
            return t;
        }();
        l.prototype._sort = function() {
            var t = this.options.sortBy;
            if (t) {
                var e = [].concat.apply(t, this.sortHistory), i = f(e, this.options.sortAscending);
                this.filteredItems.sort(i), t !== this.sortHistory[0] && this.sortHistory.unshift(t);
            }
        }, l.prototype._mode = function() {
            var t = this.options.layoutMode, e = this.modes[t];
            if (!e) throw Error("No layout mode: " + t);
            return e.options = this.options[t], e;
        }, l.prototype._resetLayout = function() {
            t.prototype._resetLayout.call(this), this._mode()._resetLayout();
        }, l.prototype._getItemLayoutPosition = function(t) {
            return this._mode()._getItemLayoutPosition(t);
        }, l.prototype._manageStamp = function(t) {
            var e = this._mode();
            e.options.isOriginLeft = this.options.isOriginLeft, e.options.isOriginTop = this.options.isOriginTop, 
            e._manageStamp(t);
        }, l.prototype._getContainerSize = function() {
            return this._mode()._getContainerSize();
        }, l.prototype.resize = function() {
            this._mode().resize();
        }, l.prototype.appended = function(t) {
            var e = this.addItems(t);
            if (e.length) {
                var i = this._filterRevealAdded(e);
                this.filteredItems = this.filteredItems.concat(i);
            }
        }, l.prototype.prepended = function(t) {
            var e = this._itemize(t);
            if (e.length) {
                var i = this.items.slice(0);
                this.items = e.concat(i), this._resetLayout(), this._manageStamps();
                var n = this._filterRevealAdded(e);
                this.layoutItems(i), this.filteredItems = n.concat(this.filteredItems);
            }
        }, l.prototype._filterRevealAdded = function(t) {
            var e = this.options.transitionDuration;
            this.options.transitionDuration = 0;
            var i = this._filter(t);
            return this.options.transitionDuration = e, this.layoutItems(i, !0), this.reveal(i), 
            t;
        }, l.prototype.insert = function(t) {
            var e = this.addItems(t);
            e.length && this.arrange();
        };
        var c = l.prototype.remove;
        return l.prototype.remove = function(t) {
            t = n(t);
            var e = this.getItems(t);
            if (c.call(this, t), e && e.length) for (var i = 0, r = e.length; r > i; i++) {
                var s = e[i];
                o(s, this.filteredItems);
            }
        }, l;
    }
    var s = t.jQuery, a = String.prototype.trim ? function(t) {
        return t.trim();
    } : function(t) {
        return t.replace(/^\s+|\s+$/g, "");
    }, p = document.documentElement, u = p.textContent ? function(t) {
        return t.textContent;
    } : function(t) {
        return t.innerText;
    }, h = Object.prototype.toString, f = Array.prototype.indexOf ? function(t, e) {
        return t.indexOf(e);
    } : function(t, e) {
        for (var i = 0, n = t.length; n > i; i++) if (t[i] === e) return i;
        return -1;
    };
    "function" == typeof define && define.amd ? define("isotope/js/isotope", [ "outlayer/outlayer", "get-size/get-size", "matches-selector/matches-selector", "./item", "./layout-mode" ], r) : t.Isotope = r(t.Outlayer, t.getSize, t.matchesSelector, t.Isotope.Item, t.Isotope.LayoutMode);
}(window), function(t) {
    function e(t, e) {
        var n = t.create("masonry");
        return n.prototype._resetLayout = function() {
            this.getSize(), this._getMeasurement("columnWidth", "outerWidth"), this._getMeasurement("gutter", "outerWidth"), 
            this.measureColumns();
            var t = this.cols;
            for (this.colYs = []; t--; ) this.colYs.push(0);
            this.maxY = 0;
        }, n.prototype.measureColumns = function() {
            if (this.getContainerWidth(), !this.columnWidth) {
                var t = this.items[0], i = t && t.element;
                this.columnWidth = i && e(i).outerWidth || this.containerWidth;
            }
            this.columnWidth += this.gutter, this.cols = Math.floor((this.containerWidth + this.gutter) / this.columnWidth), 
            this.cols = Math.max(this.cols, 1);
        }, n.prototype.getContainerWidth = function() {
            var t = this.options.isFitWidth ? this.element.parentNode : this.element, i = e(t);
            this.containerWidth = i && i.innerWidth;
        }, n.prototype._getItemLayoutPosition = function(t) {
            t.getSize();
            var e = t.size.outerWidth % this.columnWidth, n = e && 1 > e ? "round" : "ceil", o = Math[n](t.size.outerWidth / this.columnWidth);
            o = Math.min(o, this.cols);
            for (var r = this._getColGroup(o), s = Math.min.apply(Math, r), a = i(r, s), p = {
                x: this.columnWidth * a,
                y: s
            }, u = s + t.size.outerHeight, h = this.cols + 1 - r.length, f = 0; h > f; f++) this.colYs[a + f] = u;
            return p;
        }, n.prototype._getColGroup = function(t) {
            if (2 > t) return this.colYs;
            for (var e = [], i = this.cols + 1 - t, n = 0; i > n; n++) {
                var o = this.colYs.slice(n, n + t);
                e[n] = Math.max.apply(Math, o);
            }
            return e;
        }, n.prototype._manageStamp = function(t) {
            var i = e(t), n = this._getElementOffset(t), o = this.options.isOriginLeft ? n.left : n.right, r = o + i.outerWidth, s = Math.floor(o / this.columnWidth);
            s = Math.max(0, s);
            var a = Math.floor(r / this.columnWidth);
            a -= r % this.columnWidth ? 0 : 1, a = Math.min(this.cols - 1, a);
            for (var p = (this.options.isOriginTop ? n.top : n.bottom) + i.outerHeight, u = s; a >= u; u++) this.colYs[u] = Math.max(p, this.colYs[u]);
        }, n.prototype._getContainerSize = function() {
            this.maxY = Math.max.apply(Math, this.colYs);
            var t = {
                height: this.maxY
            };
            return this.options.isFitWidth && (t.width = this._getContainerFitWidth()), t;
        }, n.prototype._getContainerFitWidth = function() {
            for (var t = 0, e = this.cols; --e && 0 === this.colYs[e]; ) t++;
            return (this.cols - t) * this.columnWidth - this.gutter;
        }, n.prototype.resize = function() {
            var t = this.containerWidth;
            this.getContainerWidth(), t !== this.containerWidth && this.layout();
        }, n;
    }
    var i = Array.prototype.indexOf ? function(t, e) {
        return t.indexOf(e);
    } : function(t, e) {
        for (var i = 0, n = t.length; n > i; i++) {
            var o = t[i];
            if (o === e) return i;
        }
        return -1;
    };
    "function" == typeof define && define.amd ? define("masonry/masonry", [ "outlayer/outlayer", "get-size/get-size" ], e) : t.Masonry = e(t.Outlayer, t.getSize);
}(window), function(t) {
    function e(t, e) {
        for (var i in e) t[i] = e[i];
        return t;
    }
    function i(t, i) {
        var n = t.create("masonry"), o = n.prototype._getElementOffset, r = n.prototype.layout, s = n.prototype._getMeasurement;
        e(n.prototype, i.prototype), n.prototype._getElementOffset = o, n.prototype.layout = r, 
        n.prototype._getMeasurement = s;
        var a = n.prototype.measureColumns;
        return n.prototype.measureColumns = function() {
            this.items = this.isotope.filteredItems, a.call(this);
        }, n;
    }
    "function" == typeof define && define.amd ? define("isotope/js/layout-modes/masonry", [ "../layout-mode", "masonry/masonry" ], i) : i(t.Isotope.LayoutMode, t.Masonry);
}(window), function(t) {
    function e(t) {
        var e = t.create("fitRows");
        return e.prototype._resetLayout = function() {
            this.x = 0, this.y = 0, this.maxY = 0;
        }, e.prototype._getItemLayoutPosition = function(t) {
            t.getSize(), 0 !== this.x && t.size.outerWidth + this.x > this.isotope.size.innerWidth && (this.x = 0, 
            this.y = this.maxY);
            var e = {
                x: this.x,
                y: this.y
            };
            return this.maxY = Math.max(this.maxY, this.y + t.size.outerHeight), this.x += t.size.outerWidth, 
            e;
        }, e.prototype._getContainerSize = function() {
            return {
                height: this.maxY
            };
        }, e;
    }
    "function" == typeof define && define.amd ? define("isotope/js/layout-modes/fit-rows", [ "../layout-mode" ], e) : e(t.Isotope.LayoutMode);
}(window), function(t) {
    function e(t) {
        var e = t.create("vertical", {
            horizontalAlignment: 0
        });
        return e.prototype._resetLayout = function() {
            this.y = 0;
        }, e.prototype._getItemLayoutPosition = function(t) {
            t.getSize();
            var e = (this.isotope.size.innerWidth - t.size.outerWidth) * this.options.horizontalAlignment, i = this.y;
            return this.y += t.size.outerHeight, {
                x: e,
                y: i
            };
        }, e.prototype._getContainerSize = function() {
            return {
                height: this.y
            };
        }, e;
    }
    "function" == typeof define && define.amd ? define("isotope/js/layout-modes/vertical", [ "../layout-mode" ], e) : e(t.Isotope.LayoutMode);
}(window);

(function($, window, document, undefined) {
    "use strict";
    var CoEnvFaculty = function() {
        this.init();
    };
    CoEnvFaculty.prototype = {
        // isotope item container
        $isoContainer: $(".Faculty-list-content"),
        // toolbox
        $toolbox: $(".Faculty-toolbox"),
        toolboxSelector: ".Faculty-toolbox",
        // Roller container
        $roller: $(".Faculty-toolbox-roller-items"),
        // Roller inner container
        $rollerInner: $(".Faculty-toolbox-roller-items-inner"),
        rollerInnerPos: 0,
        // Roller items set
        $rollerSet: $(".Faculty-toolbox-roller-items-set"),
        rollerSetPrependPos: 0,
        rollerSetAppendPos: 0,
        // Roller items
        rollerItemSelector: ".Faculty-toolbox-roller-item",
        rollerItemActiveClass: "Faculty-toolbox-roller-item--active",
        // isotope items
        $isoItems: $(".Faculty-list-item"),
        isoItemSelector: ".Faculty-list-item",
        isoItemFeaturedClass: "Faculty-list-item--featured",
        isoItemImageSelector: ".Faculty-list-item-image",
        // Roller/form toggle
        $formToggle: $(".Faculty-toolbox-toggle"),
        formViewClass: "Faculty-toolbox--show-form",
        // Form selects
        $form: $(".Faculty-toolbox-form"),
        $themeSelect: $(".Faculty-toolbox-theme-select"),
        $unitSelect: $(".Faculty-toolbox-unit-select"),
        $searchField: $(".Faculty-toolbox-search"),
        $searchFeedback: $(".Faculty-toolbox-search-feedback"),
        // Feedback messages
        $feedback: $(".Faculty-toolbox-feedback"),
        $feedbackNumber: $(".Faculty-toolbox-feedback-number"),
        $feedbackMessage: $(".Faculty-toolbox-feedback-message"),
        feedbackMessageInclusive: $(".Faculty-toolbox-feedback-message").text(),
        feedbackMessage: "Faculty members are working",
        feedbackMessageSingular: "Faculty member is working",
        // Filter queue
        filterQ: {
            $rollerItem: $(),
            filters: {}
        },
        // Toolbox form
        $toolboxForm: $(".Faculty-toolbox-form"),
        // Mobile view select form
        $mobileForm: $(".Faculty-selector"),
        $mobileThemeSelect: $(".Faculty-selector-theme"),
        $mobileUnitSelect: $(".Faculty-selector-unit")
    };
    CoEnvFaculty.prototype.init = function() {
        // initialize roller
        this.rollerInit();
        // update hash on 'filter' event
        this.updateHash();
        // sync form selects
        this.selectSync();
        // handle feedback
        this.feedback();
        // handle clicking on feedback link
        this.feedbackLinks();
        // initialize isotope
        this.isoInit();
        // run filters passed through hash
        this.filterInit();
        // handle toggle between roller and form
        this.formToggleButton();
        // handle form selects
        this.formSelects();
        // handle search
        this.handleSearch();
        // handle mobile form
        this.mobileForm();
    };
    /**
	 * Initialize Roller
	 */
    CoEnvFaculty.prototype.rollerInit = function() {
        // track measurements
        this.measurements();
        // add roller item sets on roll
        this.rollerAddSets();
        // handle roller interactions
        this.rollerInteractions();
        // slide roller on filter event
        this.rollerSlider();
    };
    /**
	 * Track Roller measurements
	 */
    CoEnvFaculty.prototype.measurements = function() {
        var _this = this;
        var onResize = function() {
            _this.windowHeight = $(window).height();
            _this.rollerHeight = _this.$roller.height();
            _this.rollerOffsetTop = _this.$roller.offset().top;
            _this.rollerCenter = _this.rollerOffsetTop + _this.rollerHeight / 2;
            _this.rollerInnerOffset = _this.$rollerInner.offset().top;
        };
        onResize();
        $(window).one("debouncedresize", onResize);
        var onScroll = function() {
            _this.scrollTop = $(window).scrollTop();
        };
        onScroll();
        $(window).on("scroll", onScroll);
    };
    /**
	 * Add Roller item sets on roll
	 */
    CoEnvFaculty.prototype.rollerAddSets = function() {
        var _this = this, $rollerItems, $firstItem, firstItemOffset, $lastItem, lastItemOffset, lastItemHeight;
        // listen for 'preroll' event on $roller
        this.$roller.on("preroll", function(event, data) {
            $rollerItems = _this.$roller.find(_this.rollerItemSelector);
            $firstItem = $rollerItems.first();
            firstItemOffset = $firstItem.offset().top;
            $lastItem = $rollerItems.last();
            lastItemOffset = $lastItem.offset().top;
            lastItemHeight = $lastItem.outerHeight();
            // if top of first item (will be) > top of roller - amount of change
            // prepend roller set
            if (firstItemOffset > _this.rollerOffsetTop - data.change) {
                _this.rollerPrependSet();
            }
            // if bottom of last item (will be) < bottom of roller
            if (lastItemOffset + lastItemHeight < _this.rollerOffsetTop + _this.rollerHeight - data.change) {
                _this.rollerAppendSet();
            }
        });
    };
    /**
	 * Move roller to active item
	 */
    CoEnvFaculty.prototype.rollerSlider = function() {
        var _this = this, $item, itemOffset, itemPos, itemHeight, newInnerPos;
        function doRoll($item) {
            if ($item === undefined || $item.length === 0) {
                return;
            }
            var innerOffset = _this.$rollerInner.offset().top;
            var itemOffset = $item.offset().top;
            var itemPos = itemOffset - innerOffset;
            var itemHeight = $item.outerHeight();
            var newInnerPos = -itemPos + (_this.rollerCenter - _this.rollerOffsetTop) - itemHeight / 2;
            // deactivate active items
            _this.$roller.find("." + _this.rollerItemActiveClass).removeClass(_this.rollerItemActiveClass);
            // make item active
            $item.addClass(_this.rollerItemActiveClass);
            // trigger roller 'preroll' event
            // need to pass change
            _this.$roller.trigger("preroll", [ {
                change: newInnerPos - _this.rollerInnerPos
            } ]);
            _this.$rollerInner.css("transform", "translateY(" + newInnerPos + "px)");
            // update rollerInnerPos
            _this.rollerInnerPos = newInnerPos;
            // trigger roller 'postroll'
            _this.$roller.trigger("postroll", [ {} ]);
        }
        this.$isoContainer.on("filter", function(event, data) {
            doRoll(data.$rollerItem);
        });
    };
    /**
	 * Prepend Roller set
	 * only called from this.rollerAddSets()
	 */
    CoEnvFaculty.prototype.rollerPrependSet = function() {
        var $newSet;
        // update roller set prepend position
        this.rollerSetPrependPos -= this.$rollerSet.outerHeight();
        // clone a new set to prepend
        $newSet = this.$rollerSet.clone(true);
        // position new set
        $newSet.css("top", this.rollerSetPrependPos);
        // prepend set
        this.$rollerInner.prepend($newSet);
    };
    /**
	 * Append Roller set
	 * only called from this.rollerAddSets()
	 */
    CoEnvFaculty.prototype.rollerAppendSet = function() {
        var $newSet;
        // update roller set append position
        this.rollerSetAppendPos += this.$rollerSet.outerHeight();
        // clone a new set to append
        $newSet = this.$rollerSet.clone(true);
        // position new set
        $newSet.css("top", this.rollerSetAppendPos);
        // append set
        this.$rollerInner.append($newSet);
    };
    /**
	 * Handle roller interactions
	 */
    CoEnvFaculty.prototype.rollerInteractions = function() {
        var _this = this, filterData;
        this.$roller.on("click", this.rollerItemSelector, function(event) {
            event.preventDefault();
            var $item = $(this).find("a");
            _this.doFilter({
                $rollerItem: $(this),
                filters: {
                    theme: {
                        name: $item.text(),
                        slug: $item.data("theme"),
                        url: $item.attr("href")
                    }
                }
            });
        });
    };
    /**
	 * Initialize Isotope
	 */
    CoEnvFaculty.prototype.isoInit = function() {
        var _this = this, isoOpts;
        // set up isotope options
        isoOpts = {
            isInitLayout: false,
            itemSelector: this.isoItemSelector,
            stamp: this.toolboxSelector,
            masonry: {
                columnWidth: ".grid-sizer"
            }
        };
        // initialize isotope without layout
        this.$isoContainer.isotope(isoOpts);
        // register layoutComplete listener
        // this will not fire on initialization,
        // only on subsequent layouts
        this.$isoContainer.isotope("on", "layoutComplete", function() {
            _this.$isoContainer.trigger("isoLayoutComplete");
        });
        // layout isotope
        this.$isoContainer.isotope(isoOpts);
        // handle isotope filtering
        this.isoFilter();
        // save item offsets
        this.isoItemOffsets();
        // isotope image lazy loader
        this.isoLazyLoader();
    };
    /**
	 * Save isotope item offsets
	 */
    CoEnvFaculty.prototype.isoItemOffsets = function() {
        var _this = this;
        var saveOffset = function() {
            $.each(_this.$isoItems, function(index, el) {
                $(this).data("offset", $(this).offset().top);
            });
        };
        saveOffset();
        $(window).on("debouncedresize", saveOffset);
        this.$isoContainer.on("isoLayoutComplete", saveOffset);
    };
    /**
	 * Isotope image lazy loader
	 */
    CoEnvFaculty.prototype.isoLazyLoader = function() {
        var _this = this, $items;
        var lazyload = function() {
            $items = _this.$isoItems.not("[data-loaded]");
            if ($items.length === 0) {
                return;
            }
            $.each($items, function(index, el) {
                // return if item is visible
                if (!_this.isoItemVisible(el)) {
                    return;
                }
                // add data-picture attribute
                // which will flag this element for picturefill
                $(el).find(_this.isoItemImageSelector).attr("data-picture", "");
                // add data-loaded attribute so
                // we don't have to loop over this item again
                $(el).attr("data-loaded", "");
            });
            // run picturefill
            window.picturefill();
        };
        lazyload();
        $(window).on("scroll", lazyload);
        this.$isoContainer.on("isoLayoutComplete", lazyload);
    };
    /**
	 * Check if an isotope item is visible
	 */
    CoEnvFaculty.prototype.isoItemVisible = function(el) {
        return $(el).data("offset") < this.windowHeight + this.scrollTop;
    };
    /**
	 * Isotope filtering
	 */
    CoEnvFaculty.prototype.isoFilter = function() {
        var _this = this, filterString, $firstItem;
        // listen for filter event
        this.$isoContainer.on("filter", function(event, data) {
            filterString = _this.buildIsoFilterString(data.filters);
            // the first item in a filtered set should never be featured
            // (i.e. big), otherwise the layout will break
            $firstItem = _this.$isoItems.filter(filterString).first().removeClass(_this.isoItemFeaturedClass);
            // filter isotope
            _this.$isoContainer.isotope({
                filter: filterString
            });
        });
    };
    /**
	 * Run filters passed through hash on page load
	 */
    CoEnvFaculty.prototype.filterInit = function() {
        var _this = this, hashFilters = this.hashFilters(), data = {
            filters: {}
        }, theme, unit, $selectOpt, $item, $optAllThemes, $optAllUnits;
        $optAllThemes = this.$themeSelect.find('option[value="theme-all"]');
        $optAllUnits = this.$unitSelect.find('option[value="unit-all"]');
        if (!hashFilters) {
            // fill out filter defaults
            data.filters = {
                theme: {
                    name: $optAllThemes.text(),
                    slug: $optAllThemes.val(),
                    url: $optAllThemes.data("url")
                },
                unit: {
                    name: $optAllUnits.text(),
                    slug: $optAllUnits.val(),
                    url: $optAllUnits.data("url")
                }
            };
        } else {
            $.each(hashFilters, function() {
                $selectOpt = _this.$toolboxForm.find('option[value="' + this + '"]');
                data.filters[this.split("-")[0]] = {
                    name: $selectOpt.text(),
                    slug: this
                };
            });
            // if a unit is passed through the hash,
            // show form view
            if (data.filters.unit !== undefined && data.filters.unit.slug !== "unit-all") {
                this.formToggleOn();
            }
        }
        this.doFilter(data);
    };
    /**
	 * Parse url hash
	 */
    CoEnvFaculty.prototype.hashFilters = function() {
        var hash = window.location.hash, filters;
        // return false if hash is blank or plain hash
        if (hash === "" || hash === "#") {
            return false;
        }
        filters = hash.substring("1").split("&");
        return filters;
    };
    /**
	 * Filter isotope and trigger 'filter' event on isoContainer
	 */
    CoEnvFaculty.prototype.doFilter = function(data) {
        var _this = this;
        for (var prop in data.filters) {
            // translate '*' to 'theme-all' or 'unit-all'
            if (data.filters[prop].slug === "*") {
                data.filters[prop].slug = prop + "-all";
            }
            this.filterQ.filters[prop] = data.filters[prop];
        }
        // if data.$rollerItem is not passed, find the roller item based on theme filter
        if (data.$rollerItem === undefined && data.filters !== undefined && data.filters.theme !== undefined) {
            data.$rollerItem = this.$roller.find(this.rollerItemSelector).filter(function() {
                var theme = _this.filterQ.filters.theme.slug === "theme-all" ? "*" : _this.filterQ.filters.theme.slug;
                if ($(this).find("a").data("theme") === theme) {
                    return true;
                }
            });
        }
        // check if search was passed (overrides filters)
        if (data.search !== undefined) {
            this.filterQ.filters = {
                search: data.search,
                theme: {
                    slug: "theme-all"
                },
                unit: {
                    slug: "unit-all"
                }
            };
        }
        // pass through feedback or overwrite if undefined
        this.filterQ.feedback = data.feedback;
        this.filterQ.$rollerItem = data.$rollerItem;
        this.$isoContainer.trigger("filter", [ this.filterQ ]);
    };
    /**
	 * Update hash on 'filter' event
	 */
    CoEnvFaculty.prototype.updateHash = function() {
        var _this = this, hash;
        this.$isoContainer.on("filter", function(event, data) {
            hash = _this.buildHashFromFilters(data.filters);
            if (hash === "theme-all&unit-all") {
                hash = "";
            }
            window.location.hash = hash;
        });
    };
    /**
	 * Build an isotope filter string
	 */
    CoEnvFaculty.prototype.buildIsoFilterString = function(filters) {
        var filterString;
        filterString = $.map(filters, function(val) {
            if (val.slug !== undefined) {
                return "." + val.slug;
            }
        }).join("");
        if (filters.search !== undefined) {
            filterString = "." + filters.search.ids.join(",.");
        }
        return filterString;
    };
    /**
	 * Build hash from isotope filters
	 */
    CoEnvFaculty.prototype.buildHashFromFilters = function(filters) {
        return $.map(filters, function(val) {
            return val.slug;
        }).join("&");
    };
    /**
	 * Handle toggling between form and roller in toolbox
	 */
    CoEnvFaculty.prototype.formToggleButton = function() {
        var _this = this;
        this.$formToggle.on("click", function(event) {
            event.preventDefault();
            if (_this.$toolbox.hasClass(_this.formViewClass)) {
                _this.formToggleOff();
            } else {
                _this.formToggleOn();
            }
        });
    };
    /**
	 * Toggle toolbox form view on
	 */
    CoEnvFaculty.prototype.formToggleOn = function() {
        if (!this.$toolbox.hasClass(this.formViewClass)) {
            this.$toolbox.addClass(this.formViewClass);
        }
    };
    /**
	 * Toggle toolbox form view off
	 */
    CoEnvFaculty.prototype.formToggleOff = function() {
        if (this.$toolbox.hasClass(this.formViewClass)) {
            this.$toolbox.removeClass(this.formViewClass);
            // clear search
            this.clearSearch();
            // clear units from filter
            this.resetFilter("unit");
        }
    };
    /**
	 * Sync form selects after 'filter' event
	 */
    CoEnvFaculty.prototype.selectSync = function() {
        var _this = this, themeOptSelector, unitOptSelector;
        this.$isoContainer.on("filter", function(event, data) {
            if (data.filters.theme !== undefined) {
                themeOptSelector = 'option[value="' + data.filters.theme.slug + '"]';
                _this.$themeSelect.find(themeOptSelector).attr("selected", "selected");
                _this.$mobileThemeSelect.find(themeOptSelector).attr("selected", "selected");
            }
            if (data.filters.unit !== undefined) {
                unitOptSelector = 'option[value="' + data.filters.unit.slug + '"]';
                _this.$unitSelect.find(unitOptSelector).attr("selected", "selected");
                _this.$mobileUnitSelect.find(unitOptSelector).attr("selected", "selected");
            }
        });
    };
    /**
	 * Reset either 'theme' or 'unit' filter
	 */
    CoEnvFaculty.prototype.resetFilter = function(filter) {
        var data = {
            filters: {}
        };
        data.filters[filter] = {
            slug: filter + "-all"
        };
        this.doFilter(data);
    };
    /**
	 * Handle form selects
	 */
    CoEnvFaculty.prototype.formSelects = function() {
        var _this = this, data = {}, $opt;
        this.$themeSelect.on("change", function() {
            $opt = $(this).find("option:selected");
            data.filters = {
                theme: {
                    name: $opt.text(),
                    slug: $opt.val(),
                    url: $opt.data("url")
                }
            };
            _this.clearSearch();
            _this.doFilter(data);
        });
        this.$unitSelect.on("change", function() {
            $opt = $(this).find("option:selected");
            _this.clearSearch();
            _this.doFilter({
                filters: {
                    unit: {
                        name: $opt.text(),
                        slug: $opt.val(),
                        url: $opt.data("url")
                    }
                }
            });
        });
    };
    /**
	 * Handle feedback messages
	 */
    CoEnvFaculty.prototype.feedback = function() {
        var _this = this, number, message, themeLink, unitLink;
        var doFeedback = function(data) {
            if (data.filters.theme !== undefined) {
                themeLink = '<a href="' + data.filters.theme.url + '" data-slug="' + data.filters.theme.slug + '">' + data.filters.theme.name + "</a>";
            }
            if (data.filters.unit !== undefined) {
                unitLink = '<a href="' + data.filters.unit.url + '" data-slug="' + data.filters.unit.slug + '">' + data.filters.unit.name + "</a>";
            }
            // get number of filtered items
            number = _this.$isoContainer.data("isotope").filteredItems.length;
            // singular or plural message?
            message = number === 1 ? _this.feedbackMessageSingular : _this.feedbackMessage;
            if (data.filters.theme !== undefined && data.filters.theme.slug === "theme-all") {
                // all themes are selected
                // is the form view active?
                if (_this.$toolbox.hasClass(_this.formViewClass)) {
                    if (data.filters.unit.slug === "unit-all") {
                        message = _this.feedbackMessageInclusive;
                    } else {
                        // show unit message
                        message += " in " + unitLink;
                    }
                } else {
                    // we're in the theme roller view
                    message = _this.feedbackMessageInclusive;
                }
            } else {
                // single theme is selected
                message += " on " + themeLink;
                // is the form view active?
                if (_this.$toolbox.hasClass(_this.formViewClass)) {
                    if (data.filters.unit.slug !== "unit-all") {
                        message += " in " + unitLink;
                    }
                }
            }
            // search
            if (data.search !== undefined) {
                message = "searching";
            }
            // data.feedback overrides the above
            if (data.feedback !== undefined) {
                message = data.feedback;
            }
            // update feedback number
            _this.$feedbackNumber.text(number);
            // update feedback message
            _this.$feedbackMessage.html(message);
        };
        this.$isoContainer.on("filter", function(event, data) {
            _this.$isoContainer.one("isoLayoutComplete", function() {
                doFeedback(data);
            });
        });
    };
    /**
	 * Handle clicking on feedback links
	 */
    CoEnvFaculty.prototype.feedbackLinks = function() {
        var _this = this, data = {};
        this.$feedback.on("click", "a", function(event) {
            event.preventDefault();
            if ($(this).attr("href") === window.location) {
                return;
            }
            for (var filter in _this.filterQ.filters) {
                if (_this.filterQ.filters[filter].slug !== $(this).data("slug")) {
                    _this.resetFilter(filter);
                }
            }
        });
    };
    /**
	 * Handle search
	 * Sanitization/validation is handled by member-api
	 */
    CoEnvFaculty.prototype.handleSearch = function() {
        var _this = this, searchData, searchResponse, memberIDs, data = {};
        this.$form.on("submit", function(event) {
            event.preventDefault();
            searchData = {
                action: "coenv_member_api_search",
                data: _this.$searchField.val()
            };
            $.post(themeVars.ajaxurl, searchData, function(response) {
                searchResponse = $.parseJSON(response);
                if (searchResponse.number === 0) {
                    memberIDs = [ "Faculty-list-item--*" ];
                } else {
                    // map memberIDs
                    memberIDs = $.map(searchResponse.results, function(val) {
                        return "Faculty-list-item--" + val.ID;
                    });
                }
                data.feedback = searchResponse.message;
                data.search = {
                    ids: memberIDs,
                    keywords: searchResponse.message
                };
                // filter isotope by member ids
                _this.doFilter(data);
            });
        });
    };
    /**
	 * Clear search
	 */
    CoEnvFaculty.prototype.clearSearch = function() {
        this.$searchField.val("");
        delete this.filterQ.filters.search;
    };
    /**
	 * this.$themeSelect.on( 'change', function () {

			$opt = $(this).find('option:selected');

			data.filters = {
				theme: {
					name: $opt.text(),
					slug: $opt.val(),
					url: $opt.data('url')
				}
			};

			_this.clearSearch();

			_this.doFilter( data );
		} );

		this.$unitSelect.on( 'change', function () {

			$opt = $(this).find('option:selected');

			_this.clearSearch();

			_this.doFilter({
				filters: {
					unit: {
						name: $opt.text(),
						slug: $opt.val(),
						url: $opt.data('url')
					}
				}
			});
		} );
	 */
    /**
	 * Handle mobile form
	 * This only shows for smaller viewports instead of the toolbox
	 */
    CoEnvFaculty.prototype.mobileForm = function() {
        var _this = this, $opt;
        this.$mobileForm.on("submit", function(event) {
            event.preventDefault();
        });
        this.$mobileThemeSelect.on("change", function() {
            $opt = $(this).find("option:selected");
            _this.clearSearch();
            _this.doFilter({
                filters: {
                    theme: {
                        name: $opt.text(),
                        slug: $opt.val(),
                        url: $opt.data("url")
                    }
                }
            });
        });
        this.$mobileUnitSelect.on("change", function() {
            $opt = $(this).find("option:selected");
            _this.clearSearch();
            _this.doFilter({
                filters: {
                    unit: {
                        name: $opt.text(),
                        slug: $opt.val(),
                        url: $opt.data("url")
                    }
                }
            });
        });
    };
    new CoEnvFaculty();
})(jQuery, window, document);
//# sourceMappingURL=faculty.min.map